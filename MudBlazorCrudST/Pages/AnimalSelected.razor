@page "/animalsSelected"

@using MudBlazorCrudST.Data
@inject MudBlazorCrudST.IService.IAnimalService animalService
@inject MudBlazor.ISnackbar Snackbar

<h3>Animals Selected</h3>
<style>
	.mud-table-cell-custom-group {
		font-weight: 500;
	}

	.mud-table-cell-custom-group-footer {
		padding-bottom: 50px;
		text-align: right;
	}
</style>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
		  Items="@Animals"
		  GroupBy="@_groupDefinition"
		  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
		  GroupFooterClass="mb-4">
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh>Breed</MudTh>
		<MudTh>BirthDate</MudTh>
		<MudTh>Sex</MudTh>
		<MudTh>Price</MudTh>
		<MudTh>Status</MudTh>
	</HeaderContent>
	<GroupHeaderTemplate>
		<MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
	</GroupHeaderTemplate>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.Name</MudTd>
		<MudTd DataLabel="Breed">@context.Breed</MudTd>
		<MudTd DataLabel="BirthDate">@context.BirthDate.ToString("MM/dd/yyyy")</MudTd>
		<MudTd DataLabel="Sex">@context.Sex</MudTd>
		<MudTd DataLabel="Price">@context.Price.ToString("C")</MudTd>
		<MudTd DataLabel="Status">@context.Status</MudTd>
	</RowTemplate>
	<FooterContent>
			<MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">@AmmountText</MudTh>
	</FooterContent>
	<PagerContent>
		<MudTablePager PageSizeOptions="new int[]{10, 20, 30, 40, 50, 100}" />
	</PagerContent>
</MudTable>

@code {

	private HashSet<Animal> animals = new HashSet<Animal>();

	private decimal porcentaje = 0;

	private TableGroupDefinition<Animal> _groupDefinition = new()
	{
		GroupName = "Group",
		Indentation = false,
		Expandable = false,
		Selector = (e) => e.Breed
	};

	private IEnumerable<Animal> Animals = new List<Animal>();

	protected override async Task OnInitializedAsync()
	{
		Animals = GetAnimals();
	}

	private HashSet<Animal> GetAnimals()
	{
		HashSet<Animal> lAnimals = new HashSet<Animal>();

		animals = animalService.GetAnimals();
		lAnimals = animals.Where(e => e.Selected).ToHashSet();		
		return lAnimals;
	}
	
	public string AmmountText
	{
		get
		{
			return $"Shipping Cost: {calculateShipping()} | Total Amount: {calculateTotalAmmount()}";
		}
	}

	private string calculateShipping()
	{
		return string.Format("{0:C2}", animals.Count > 20 ? 0 : 1000);
	}

	private string calculateTotalAmmount()
	{
		var Total = animals.Sum(x => x.Price);
		// 5%
		var discount1 = animals.Count > 5 ? (Total * 5 / 100) : 0;
		// 3%
		var discount2 = animals.Count > 10 ? (Total * 3 / 100) : 0;
		return string.Format("{0:C2}", Total - discount1 - discount2);
	}
}